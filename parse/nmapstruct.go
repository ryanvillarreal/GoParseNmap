package parse

import(
	"encoding/xml"
)

// let's create structs! - generated by hand :| 
// DAMMIT remember to Capatalize the stupid Vars or they won't export :| 
// ROOT: NmapRun Tag
// LEVEL 0 ---------------------------------------------------------------------------
type Nmaprun struct{
	// setup
	XMLName xml.Name `xml:"nmaprun"`

	// Direct attributes of Nmaprun tag
	Args string `xml:"args,attr"`
	Scanner string `xml:"scanner,attr"`
	StartTime string `xml:"start,attr"`
	StartDate string `xml:"startstr,attr"`
	Version string `xml:"version,attr"`
	XMLVersion string `xml:"xmloutputversion,attr"`

	// Nested - creating sub structs
	Hosts 	[]Host `xml:"host"`
	RunStats []RunStat `xml:"runstats"`
	ScanInformation []ScanInfo `xml:"scaninfo"`
}



// LEVEL 2 -------------------------------------------------------------------------

// Sub NmapRun Tag
type ScanInfo struct{
	// setup
	XMLName xml.Name `xml:"scaninfo"`

	// Direct attributes of ScanInfo
	NumServices string `xml:"numservices,attr"`
	ScanProtocol string `xml:"protocol,attr"`
	ScanServices string `xml:"services,attr"`
}

// Maybe later if needed?
// type VerboseInfo struct {

// }

// type DebuggingInfo struct {

// }

// type TaskBeginInfo struct {

// }

// type TaskEndInfo struct {

// }

// Sub NmapRun Tag
type Host struct {
	// setup
	XMLName xml.Name `xml:"host"`

	// Direct attributes of Host tag
	HostEndTime string `xml:"endtime,attr"`
	HostStartTime string `xml:"starttime,attr"`

	// Nested - Inception 
	Address Address `xml:"address"`
	HostStatus Status `xml:"status"`
	PortData []Ports `xml:"ports"`
}


// Sub NmapRun Tag
type RunStat struct {
	// setup
	XMLName xml.Name `xml:"runstats"`

	//attrs of RunStat
	// None

	// Nested - Inception
	Finishes []Finished `xml:"finished"`
	StatHost []StatHosts `xml:"hosts"`
}


// LEVEL 3 ------------------------------------------------------------------------

// Sub Host Tag
type Status struct {
	// // setup
	XMLName xml.Name `xml:"status"`

	// Direct attributes of Status tag
	Reason string `xml:"reason,attr"`
	Reason_TTL string `xml:"reason_ttl,attr"`
	State string `xml:"state,attr"`
}

// Sub Host Tag
type Address struct {
	// setup
	XMLName xml.Name `xml:"address"`

	// Direct attributes of Address tag
	Addr string `xml:"addr,attr"`
	AddrType string `xml:"addrtype,attr"`
}

// Sub Host Tag
type Ports struct {
	// setup 
	XMLName xml.Name `xml:"ports"`

	// Direct Attributes of Ports

	// Lots of single port tags in Ports tag
	SinglePort []IndividualPort `xml:"port"`
	Extras 	   []ExtraPorts `xml:"extraports"`
}



// Sub RunStat
type StatHosts struct {
	// setup 
	XMLName xml.Name `xml:"hosts"`

	// attrs to RunStats Hosts Tag
	Down string `xml:"down,attr"`
	Up string `xml:"up,attr"`
	Total string `xml:"total,attr"`
}


// Sub RunStat
type Finished struct {
	// setup 
	XMLName xml.Name `xml:"finished"`

	// attrs to Finished
	Elapsed string `xml:"elapsed,attr"`
	ExitStatus string `xml:"exit,attr"`
	Summary string `xml:"summary,attr"`
	time string `xml:"time,attr"`
	timestr string `xml:"timestr,attr"`

}


// LEVEL 4 ----------------------------------------------------------------------

// Sub Ports
type IndividualPort struct {
	// setup
	XMLName xml.Name `xml:"port"`

	// Direct attributes of Port
	PortID string `xml:"portid,attr"`
	PortProtocol string `xml:"protocol,attr"`

	// Subbin again
	States []State `xml:"state"`
	Services []Service `xml:"service"`
 
}

// Sub Ports
type ExtraPorts struct {
	// setup
	XMLName xml.Name `xml:"extraports"`

	// Direct attributes of ExtraPorts
	ExtraPortsCount string `xml:"count,,attr"`
	ExtraPortsState string `xml:"state,attr`

	// I don't know how deep I am now...
	ExtraReason []ExtraReasons `xml:"extrareasons"`
}


// LEVEL 5 ---------------------------------------------------------------------

// Sub ExtraPorts
type ExtraReasons struct{
	// setup
	XMLName xml.Name `xml:"extrareasons"`

	// Direct Attributes to ExtraReasons tag
	ExtraReasonsCount string `xml:"count,attr"`
	ExtraReasonsReason string `xml:"reason,attr"`
}

// Sub Port Tag
type State struct{
	// setup
	XMLName xml.Name `xml:"state"`

	// Direct Attributes to State
	StateReason string `xml:"reason,attr"`
	StateReason_TTL string `xml:"reason_ttl,attr"`
	StateState string `xml:"state,attr"`

}

// Sub Port Tag
type Service struct{
	// setup
	XMLName xml.Name `xml:"service"`

	// Direct Attrirubtes to Service Tag
	ServiceConf string `xml:"conf,attr"`
	ServiceMethod string `xml:"method,attr"`
	ServiceName string `xml:"name,attr"`
	ServiceProduct string `xml:"product,attr"`
}


// LEVEL 6 ----------------------------------------------------------------

// Sub Service Tag
type CPE struct {
	// setup
	XMLName xml.Name `xml:"cpe"`
}


